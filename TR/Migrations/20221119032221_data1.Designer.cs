// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TR;

#nullable disable

namespace TR.Migrations
{
    [DbContext(typeof(transportrouteContext))]
    [Migration("20221119032221_data1")]
    partial class data1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TR.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("TR.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RouteEnd")
                        .HasColumnType("longtext");

                    b.Property<string>("RouteStart")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("TravelTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TR.Runs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Busid")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Routeid")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("RunEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("RunStart")
                        .HasColumnType("time(6)");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Busid");

                    b.HasIndex("Routeid");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("TR.Stoproute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameStop")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Routeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Routeid");

                    b.ToTable("Stoproutes");
                });

            modelBuilder.Entity("TR.Runs", b =>
                {
                    b.HasOne("TR.Bus", "Bus")
                        .WithMany("Runs")
                        .HasForeignKey("Busid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TR.Route", "Route")
                        .WithMany("Runs")
                        .HasForeignKey("Routeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TR.Stoproute", b =>
                {
                    b.HasOne("TR.Route", "Route")
                        .WithMany("Stoproute")
                        .HasForeignKey("Routeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TR.Bus", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("TR.Route", b =>
                {
                    b.Navigation("Runs");

                    b.Navigation("Stoproute");
                });
#pragma warning restore 612, 618
        }
    }
}
